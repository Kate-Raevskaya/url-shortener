type: edu
files:
- name: src/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>Hello, World!</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |-
    import path from 'path';
    import {correct, StageTest, wrong} from 'hs-test-web';

    const pagePath = path.join(import.meta.url, '../../src/index.html');

    global.browserOptions = {
        defaultViewport: {
            width: 1024,
            height: 768
        }
    }

    class Test extends StageTest {

        page = this.getPage(pagePath)

        tests = [ this.page.execute(() => {
            // test #1
            // HELPERS-->
            // method to check if element with id exists
            this.elementExists = (id, nodeNames) => {
                const element = document.body.querySelector(id);
                if (!element) return true;
                else return (nodeNames && !nodeNames.includes(element.nodeName.toLowerCase()));
            };

            // method to check if element with id has right text
            this.elementHasText = (id, correctText) => {
                const element = document.body.querySelector(id);
                if (!element) return true;

                if (correctText) {
                    return (element.innerText !== correctText);
                }

                return !element.innerText || element.innerText.trim().length === 0;
            };

            // method to check if element with id has right attribute
            this.elementHasAttribute = (id, attribute, value) => {
                const element = document.body.querySelector(id);
                if (!element) return true;
                const attributeValue = element.getAttribute(attribute);
                if (!attributeValue) return true;
                // console.log(attributeValue);
                return value && attributeValue !== value;
            };

            // check link
            this.checkLink = (order, originalUrl) => {
                // check if li exists
                const li = document.body.querySelector(`#list-url > li:nth-child(${order})`);
                if (!li) return wrong("The li element is not displayed in #list-url after clicking the button.");

                // check if a exists
                const a = li.querySelector("a");
                if (!a) return wrong("The link is not displayed inside a list-item after clicking the button.");

                // check if a has inner text
                if (!a.innerText) return wrong("The link does not have a text.");

                // check if link starts with localhost
                if (!a.innerText.startsWith("localhost/"))
                    return wrong("The link does not start with localhost/.");

                // check if a text is 5 characters
                if (a.innerText.split("localhost/")[1].length !== 5)
                    return wrong("The link does not have the correct short URL length.");

                // check if a has href
                if (this.elementHasAttribute("a", "href", originalUrl))
                    return wrong("The link does not have the correct href attribute.");

                // check if a has target
                if (this.elementHasAttribute("a", "target", "_blank"))
                    return wrong("The link does not have the correct target attribute.");

                // check if li has correct text
                if (!li.innerText.includes(originalUrl))
                    return wrong("The li element does not have the correct text.");

                // check if link random text
                if (order === 2) {
                    const a1 = document.body.querySelector(`#list-url > li:nth-child(1) > a`);
                    const a2 = document.body.querySelector(`#list-url > li:nth-child(2) > a`);
                    if (a1.innerText === a2.innerText)
                        return wrong("The link is not random.");
                }
            };

            // check p
            this.checkP = () => {
                // check if p exists
                const p = document.body.querySelector("p");
                if (!p) return wrong("The paragraph is not displayed after clicking the button with wrong input.");

                // check if p has text
                const pText = "Please enter a valid url";
                if (p.innerText !== pText)
                    return wrong("The paragraph does not have the correct text.");
            };

            // empty input
            this.emptyInput = () => {
                const input = document.body.querySelector("#input-url");
                if (!input) return wrong("The input field is missing.");
                input.value = "";
            };

            // check click counts
            this.checkClickCounts = (order, count) => {
                const li = document.body.querySelector(`#list-url > li:nth-child(${order})`);
                if (!li) return wrong("The li element is not displayed in #list-url after clicking the button.");
                const span = li.querySelector("span");
                if (!span) return wrong("The span element is not displayed in the li element after clicking the button.");
                const correctText = 'Clicks:';
                if (!span.innerText.includes(correctText))
                    return wrong(`The span element does not include the correct text: '${correctText}' .`);
                if (!span.innerText.includes(count)) return wrong("The span element does not have the correct click count.");
            }

            // check list empty
            this.checkListEmpty = () => {
                const ul = document.body.querySelector("#list-url");
                if (!ul) return wrong("The ul element is missing.");
                if (ul.children.length !== 0) return wrong("The ul element should be empty after clicking the button: '#button-delete'.");
            }

            // check input link deleted
            this.checkInputLinkDeleted = (input) => {
                const lis = Array.from(document.body.querySelectorAll(`#list-url > li`));

                if (lis.length === 0)
                    return wrong("You should only delete the entered matching links from the list.");

                let isFalse = false;
                for (let i = 0; i < lis.length; i++) {
                    const liText = lis[i].innerText;
                    if (liText.includes(input)) isFalse = true;
                }
                if (isFalse) return wrong("The entered link is not deleted from the list. All occurrences should be deleted.");
            }

            // CONSTANTS-->
            const theElement = "The element with the selector of";
            this.listUrl = "#list-url";
            // <--CONSTANTS

            // MESSAGES-->
            this.missingIdMsg = (id) => {
                return `${theElement} "${id}" is missing in the body of the HTML document.`;
            };
            this.wrongTagMsg = (id, tag, tagAlt) => {
                if (tagAlt) return `${theElement} "${id}" should be a/an ${tag} or ${tagAlt} tag.`;
                else return `${theElement} "${id}" should be a/an ${tag} tag.`;
            };
            this.wrongTextMsg = (id, text) => {
                return `${theElement} "${id}" should have the text: "${text}".`;
            };
            // <--MESSAGES
            return correct();

        }), this.page.execute(() => {
            // test #2
            // STAGE1 TAGS

            // check if h1 exists
            const h1 = "h1";
            if (this.elementExists(h1)) return wrong(this.missingIdMsg(h1));

            // check if correct text
            const h1Text = "URL Shortener";
            if (this.elementHasText(h1, h1Text)) return wrong(this.wrongTextMsg(h1, h1Text));

            // check if #input-url exists
            const inputUrl = "#input-url";
            if (this.elementExists(inputUrl)) return wrong(this.missingIdMsg(inputUrl));

            // check if its input
            if (this.elementExists(inputUrl, ["input"])) return wrong(this.wrongTagMsg(inputUrl, "input"));

            // check if it has placeholder
            const placeholder = "Enter a url";
            if (this.elementHasAttribute(inputUrl, "placeholder", placeholder))
                return wrong(`The "${inputUrl}" input should have the placeholder attribute with the value of "${placeholder}".`);

            // check if  #button-create exists
            const buttonCreate = "#button-create";
            if (this.elementExists(buttonCreate)) return wrong(this.missingIdMsg(buttonCreate));

            // check if its button
            if (this.elementExists(buttonCreate, ["button"])) return wrong(this.wrongTagMsg(buttonCreate, "button"));

            // check if it has text
            const buttonText = "Create";
            if (this.elementHasText(buttonCreate, buttonText))
                return wrong(this.wrongTextMsg(buttonCreate, buttonText));

            // check if #list-url exists
            if (this.elementExists(this.listUrl)) return wrong(this.missingIdMsg(this.listUrl));

            // check if its ol
            if (this.elementExists(this.listUrl, ["ol"])) return wrong(this.wrongTagMsg(this.listUrl, "ol"));

            return correct();

        }),
            this.node.execute(async () => {
                // test #3
                // check button click event
                const buttonCreate = "#button-create";
                const button = await this.page.findBySelector(buttonCreate);
                const input = await this.page.findBySelector("#input-url");
                const inputText = "https://upload.wikimedia.org/wikipedia/commons/2/21/Hello_World_Brian_Kernighan_1978.jpg";
                await input.inputText(inputText);

                let isEventFired = button.waitForEvent('click', 1000);
                await button.click();

                if (await !isEventFired) return wrong(`Expected click event on button with ${buttonCreate} id!`);

                await new Promise((resolve => {
                    setTimeout(() => {
                        resolve();
                    }, 3000)
                }));

                // check first link
                await this.page.evaluate(() => {
                    const inputText = "https://upload.wikimedia.org/wikipedia/commons/2/21/Hello_World_Brian_Kernighan_1978.jpg";
                    return this.checkLink(1, inputText);
                });

                const link1Selector = `#list-url > li:nth-child(1) > a`;
                const link1 = await this.page.findBySelector(link1Selector);
                isEventFired = link1.waitForEvent('click', 1000);
                await link1.click();

                if (await !isEventFired) return wrong(`Expected click event on link with ${link1Selector} selector!`);

                await button.click();

                await new Promise((resolve => {
                    setTimeout(() => {
                        resolve();
                    }, 3000)
                }));

                // check another link
                await this.page.evaluate(() => {
                    const inputText = "https://upload.wikimedia.org/wikipedia/commons/2/21/Hello_World_Brian_Kernighan_1978.jpg";
                    return this.checkLink(2, inputText);
                });

                await this.page.evaluate(() => {
                    return this.emptyInput();
                });

                // check if it can handle wrong input
                const wrongInput = "htps:/upload.wikimedia.org/wikipedia/commons/2/21/Hello_World_Brian_Kernighan_1978.jpg";
                await input.inputText(wrongInput);
                await button.click();

                await new Promise((resolve => {
                    setTimeout(() => {
                        resolve();
                    }, 3000)
                }));

                // check paragraph
                await this.page.evaluate(() => {
                    return this.checkP();
                });

                return correct();

            }),
            this.node.execute(async () => {
                // test #4
                // check click counter
                const link1Selector = `#list-url > li:nth-child(1) > a`;
                const link1 = await this.page.findBySelector(link1Selector);
                await link1.click();
                await link1.click();

                await new Promise((resolve => {
                    setTimeout(() => {
                        resolve();
                    }, 3000)
                }));

                // check first link click counts
                await this.page.evaluate(() => {
                    return this.checkClickCounts(1, 3);
                });

                return correct();

            }),
            this.node.execute(async () => {
                // test #4.1
                // check click counter
                const link2Selector = `#list-url > li:nth-child(2) > a`;
                const link2 = await this.page.findBySelector(link2Selector);
                await link2.click();
                await link2.click();

                await new Promise((resolve => {
                    setTimeout(() => {
                        resolve();
                    }, 3000)
                }));

                // check second link click counts
                await this.page.evaluate(() => {
                    return this.checkClickCounts(2, 2);
                });

                return correct();
            }),
            this.page.execute(() => {
                // test #5
                // check if  #button-delete exists
                const buttonDelete = "#button-delete";
                if (this.elementExists(buttonDelete)) return wrong(this.missingIdMsg(buttonDelete));

                // check if its button
                if (this.elementExists(buttonDelete, ["button"])) return wrong(this.wrongTagMsg(buttonDelete, "button"));

                // check if it has text
                const buttonText = "Delete";
                if (this.elementHasText(buttonDelete, buttonText))
                    return wrong(this.wrongTextMsg(buttonDelete, buttonText));

                return correct();
            }),
            this.node.execute(async () => {
                // test #6
                // check button click event
                await this.page.evaluate(() => {
                    return this.emptyInput();
                });

                const buttonCreateSelector = "#button-create";
                const buttonCreate = await this.page.findBySelector(buttonCreateSelector);

                const input = await this.page.findBySelector("#input-url");
                const inputText = "https://en.wikipedia.org/wiki/I%27m_Still_Standing#/media/File:Elton_John_StillStanding.jpg";
                await input.inputText(inputText);

                await buttonCreate.click();

                await new Promise((resolve => {
                    setTimeout(() => {
                        resolve();
                    }, 3000)
                }));

                await this.page.evaluate(() => {
                    return this.emptyInput();
                });

                await new Promise((resolve => {
                    setTimeout(() => {
                        resolve();
                    }, 3000)
                }));

                const deletedText = "https://upload.wikimedia.org/wikipedia/commons/2/21/Hello_World_Brian_Kernighan_1978.jpg";

                await input.inputText(deletedText);

                const buttonDeleteSelector = "#button-delete";
                const buttonDelete = await this.page.findBySelector(buttonDeleteSelector);
                let isEventFired = buttonDelete.waitForEvent('click', 1000);
                await buttonDelete.click();

                if (await !isEventFired) return wrong(`Expected click event on button with ${buttonDeleteSelector} id!`);

                await new Promise((resolve => {
                    setTimeout(() => {
                        resolve();
                    }, 3000)
                }));

                // check if inputted link deleted
                await this.page.evaluate(() => {
                    const deletedText = "https://upload.wikimedia.org/wikipedia/commons/2/21/Hello_World_Brian_Kernighan_1978.jpg";
                    return this.checkInputLinkDeleted(deletedText);
                });

                await this.page.evaluate(() => {
                    return this.emptyInput();
                });

                await new Promise((resolve => {
                    setTimeout(() => {
                        resolve();
                    }, 3000)
                }));

                await buttonDelete.click();

                await new Promise((resolve => {
                    setTimeout(() => {
                        resolve();
                    }, 3000)
                }));

                // check if all deleted
                await this.page.evaluate(() => {
                    return this.checkListEmpty();
                });

                return correct();

            }),
        ]

    }

    it("Test stage", async () => {
        await new Test().runTests()
    }).timeout(40000);
  learner_created: false
- name: src/style.css
  visible: true
  text: |-
    .error-visibility {
        display: none;
    }
  learner_created: true
- name: src/script.js
  visible: true
  text: "let userInput = document.getElementById('input-url');\nlet createButton =\
    \ document.getElementById('button-create');\nlet listOfUrl = document.getElementById('list-url');\n\
    let errorMessage = document.getElementById('error-message');\n\nfunction checkUrl()\
    \ {\n    let userUrl = userInput.value;\n    let patternUrl = /^https?:\\/\\/(?:www\\\
    .)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_\\\
    +.~#?&\\/=]*)$/;\n    return patternUrl.test(userUrl);\n}\n\nfunction generateRandomString(length)\
    \ {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\
    \    const charactersLength = characters.length;\n    let counter = 0;\n    while\
    \ (counter < length) {\n        result += characters.charAt(Math.floor(Math.random()\
    \ * charactersLength));\n        counter += 1;\n    }\n    return result;\n}\n\
    \nfunction createShortUrl() {\n    let shortUrl = document.createElement('a');\n\
    \    let randomString = generateRandomString(5);\n    let userUrl = userInput.value;\n\
    \    shortUrl.setAttribute('id', 'short-url');\n    shortUrl.setAttribute('href',\
    \ userUrl);\n    shortUrl.setAttribute('target', '_blank');\n    shortUrl.setAttribute('rel',\
    \ 'noopener noreferrer');\n    shortUrl.innerText = `localhost/${randomString}`;\n\
    \    let listElement = document.createElement('li');\n    listElement.innerText\
    \ = ` - ${userUrl}`;\n    listElement.insertAdjacentElement('afterbegin', shortUrl);\n\
    \    let clickCount = document.createElement('span');\n    let count = 0;\n  \
    \  clickCount.innerText = ` - Click: ${count}`;\n    listElement.insertAdjacentElement('beforeend',\
    \ clickCount);\n    shortUrl.addEventListener('click', () => {\n        count\
    \ += 1;\n        clickCount.innerText = ` - Clicks: ${count}`;\n    });\n    \n\
    \    return listElement;\n}\n\n// function addClickCounter() {\n//     let clickCount\
    \ = document.createElement('span');\n//     let count = 0;\n//     clickCount.innerText\
    \ = ` - Click: ${count}`;\n//     listElement.insertAdjacentElement('beforeend',\
    \ clickCount);\n//     shortUrl.addEventListener('click', () => {\n//        \
    \ count += 1;\n//         clickCount.innerText = ` - Click: ${count}`;\n//   \
    \  })\n// }\n\ncreateButton.addEventListener('click', () => {\n    if (checkUrl())\
    \ {\n        errorMessage.classList.add('error-visibility');\n        let url\
    \ = createShortUrl();\n        listOfUrl.appendChild(url);\n    } else {\n   \
    \     errorMessage.classList.remove('error-visibility');\n    }\n})"
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/26975#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 16 May 2023 18:16:19 UTC"
record: 3
